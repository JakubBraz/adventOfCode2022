from functools import reduce
from collections import defaultdict


def propose_move(elf, elves, move_queue):
    elf_x, elf_y = elf
    for move in move_queue:
        if not any((elf_x + x, elf_y + y) in elves for x, y in move):
            to_move = reduce(lambda acc, val: (acc[0] + val[0], acc[1] + val[1]), move, (0, 0))
            to_move = (0 if to_move[0] not in (-3, 3) else to_move[0] // 3,
                       0 if to_move[1] not in (-3, 3) else to_move[1] // 3)
            return to_move


def get_considered_moves(elves, move_queue):
    all_moves = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]
    to_move = defaultdict(list)
    for elf_x, elf_y in elves:
        if any((elf_x + x, elf_y + y) in elves for x, y in all_moves):
            xy = propose_move((elf_x, elf_y), elves, move_queue)
            if xy:
                to_move[(xy[0] + elf_x, xy[1] + elf_y)].append((elf_x, elf_y))
    return to_move


def step(elves, move_queue):
    new_elves = set(elves)
    considered_moves = get_considered_moves(new_elves, move_queue)
    for xy, elf_list in considered_moves.items():
        if len(elf_list) == 1:
            new_elves.remove(elf_list[0])
            new_elves.add(xy)
    return new_elves


def simulation(elves, steps):
    move_queue = [[(-1, -1), (-1, 0), (-1, 1)], [(1, -1), (1, 0), (1, 1)],
                  [(-1, -1), (0, -1), (1, -1)], [(-1, 1), (0, 1), (1, 1)]]
    for i in range(steps):
        new_elves = step(elves, move_queue)
        move_queue = move_queue[1:] + [move_queue[0]]
        if new_elves == elves:
            return i + 1
        elves = new_elves
    return elves


def draw(elves):
    for x in range(-2, 10):
        line = ''.join("#" if (x, y) in elves else '.' for y in range(-3, 11))
        print(line)
    print('')


def solve1(elves):
    elves = simulation(elves, 10)
    min_x = min(e[0] for e in elves)
    max_x = max(e[0] for e in elves)
    min_y = min(e[1] for e in elves)
    max_y = max(e[1] for e in elves)
    result = [1 for x in range(min_x, max_x + 1) for y in range(min_y, max_y + 1) if (x, y) not in elves]
    return len(result)


def solve2(elves):
    steps = simulation(elves, 1_000_000)
    return steps


def main():
    elves = parse_input(day_input())
    result1 = solve1(elves)
    print(result1)
    result2 = solve2(elves)
    print(result2)


def parse_input(arg):
    result = arg.split('\n')
    result = {(x, y) for x in range(len(result)) for y in range(len(result[x])) if result[x][y] == '#'}
    return result


def day_input_test2():
    return """.....
..##.
..#..
.....
..##.
....."""


def day_input_test():
    return """....#..
..###.#
#...#.#
.#...##
#.###..
##.#.##
.#..#.."""


def day_input():
    return """#.#..#...#..##.#..##.##.###.#..#...#.############.###.####.....##.#.......
...#..#..##......#.......###.#..##.#.#.#...#..#.#.#.#...###.#..#...#.....#
##..###..##.####....##.#...#....##.....#.##..#####..##..###.#.#.#.##......
.#.#.##.#..##....#..#...#.#.##.#...##.##.##....#...####..#.###..#.#..##.#.
##..##.##..#.#####..#..#####..##.###.##.#..#.#....#.#.##.###..#####.#...##
.#..#.#.##.....##.#.####...##.#.......##.#.#.######.#....#####.#####..#..#
##....#...##.#.....##..#.#...######.#..#.##.###..###.#.##.##.#..#....#..##
.#.###..###.##.#...#.#.##.#.#...#####.##.#.##.######..######.##...###.##..
#.#..##....#....#..####.#..###.#...#.#.########.#....#..#...#.#..#..####..
....#.#.##..#.#######...##...##.#..#.#.###.###...##...##.#...##...#.#####.
....#.####..#......#..#....#..###...#.#....#.##...#.#....#####..#..#.#...#
#......#..#######..#...####...#.#.##.#..###.....#.#.####.#.#.#.##.##.##.##
.###.....##..###..####.##..###....#..#...###..##..##..#.####.##.#......###
###...#.........#.#.....####....##.###.####.###.#....##.#..#.#..##...#..##
..#.#.#####.#..#.#.######.#####....#.#...#..#.##..#..#.#..##..#..##.###...
##.#####.##.#...#.#.#...#...#..........#.#.#..####.#...##.######..###...##
..#.#.####..##..#.#..#####.#.##..#..#.##....###.##.##..#.#...##.##..##.##.
###..#.######.##...##.##.####....#.##.#.#.#...#..#....##..####..##.#.#.##.
.##.##.###.....####..###....#.#..##..#.#..#..##..#.##.##...##..#.#.#..###.
....#.####...######.....########.#.#....##.#..###..#.###..###.#..#.#....##
.#..###.#.#.#.#.#..#...####.#.#.##....#..#...#....##.....####...####.#.###
#.##...###.#####.##.###.#....##..#.....##..#...#..##.#...#..##...##.#.##.#
...#..####..##....###......######.#.#.#..#######...##.#..####.....#.#.####
...#.####....###.##.#.#.#..##..#...#.##.#...#.###..#..#....###.##.....#..#
#..#.#.##...#......##.##..#..####..##..###.###.#.###.##....#....###.##..#.
.#..#..####.#.#.###.###.####.#....#.####....#.##.##....#......#.####.##..#
...####.#...#.#....#.#......#.#.#..##.##.##....##...##......##.####.##....
.....#..#.##.##..#..##...###..#..#.#...####.#.##...##.#####.#..#..#..#####
..##.#...###....#...##.#.#.......#....####..##........#...#..###..#..###..
####...###...#....####.##...##.####..##.##...#####.####..###..##.##.#.###.
...........###....#....#...#..##..###...#..#.#..#.#.#....####.#.#..####...
.#.##.###.#.##..##..######.####....#.####...#..#...#..##..######.#.##.####
.###..#.#..##..##...#...#...####.....##..#..##.#..##....#...#..##.#..#.#..
.#.###.#...##..#..#..###...#.##.#.#.....#.#.#...#...##.#.##.#...##....#..#
.##.##..#.#.#..#.#######.###..###.#.#####..#.###.####..###...#.#.##....#..
.....###.####.#####.###....##.##.##.##...###.#.#.#...####...###....#...###
##.....#..#....#.###..##...##.#.#..###.#.#..###.#####.##.##.##.#...###.##.
.#..#.#####....#.#.#.#..#.####...#...#..###..##.######..#.#..####..##.##..
.#....#..#....#.##.#.#.##..#.#..###..##..##..###..#.#######..####..###.#..
#.#.##.##.#.##.##..#...#..###..###.#.....#.###.#..####.#..#####...###.#.#.
...#.#.##..#.#...#.#..#..####.#...###....#.....#.....#.##.####.#...####.##
##.###.##..#..##.###.#..#..#.###.###.##.##...#.#..####....##.#####...#.#.#
###.....#.#.##.#...#.#...##.##.#..####.##...#.#.#####....#..#####...#.#.#.
##.######.#.#....#....#.#####.....####....###.#.#...##.#..#.##.#.##..##.#.
##...##.##.#..#.#......#.####..###..###..#....###..#..#########..#.###.#..
#.#..###..#...#.#.#####.#.##..#..#.#.#.#..#.##.####.####..#.#..##.##.####.
###########.#..###..#.##.###.#.#.#.#..##.##...#...###..##..###.##...##.#.#
..#.##..###....#.#..#.......#.##..##.######..#####.##.##........##....#...
.#..#.##.#..#......##.#..##.#.##.###..###.#....##..###.#.#.#...#.##.#...##
#####..##..##.#..###...##.#...#.##.#..#....##..#..#...#.#...##.###...#.#.#
#.#.#.....###.#.#.##.......#....#.####.########..#.##.##...#.#.#....##....
.###.#...###..#####..##..#.#.##.####.###.#....##.#..##..#...#.....#####.#.
#####.#..#.###...##.#..##.##...####...####..###...###......#..#.#.......##
###....#.##.#.#.#.####.##.###...##.#.#...#..#.....#.##########...########.
###...###.#..#....#.#.#...#...#...#.#####...##..#.....##..##...#.#.#.##.#.
##.##.#..###....#..#.#.#####...##....#....#...###....#..#..#.#.#...##..###
...#..##..###..#.####..#.#.#....##.##.#.#...#....###...#.##......##.#.###.
.#.######.#######..#..#.#..##..#..#.##.#...####..##########..#.##..#.#.###
.#.#...#..##.#...#..##.#..##......#.###.###.#.##.###...#....#...########.#
.##.#....#..#.#.##..#.#####...##.#.##.##..#.#.##.##.#.#...#.#...#....##.##
..##.###.###...#...##...#.##..###.....##.#.####.###.......#....##.##.##...
.####.#.###.##.#...###.#######..#.....###..#..##.#..##......#..##.##..###.
##..#.#####.##...##..###.######..#.#.##...##.#.#.##.#..#....###.##..#..###
.###....###...#...#...#.#..###.#.##..###.#...##..#..#...##...##....#.####.
.##.#.#.##..#.#.#..#..####...###.##..##.##..###..#####..###...#.#.########
.##..##..##....#....#.#.#.##.#....#....#..###.####.##..##...#.##..##.....#
..#.###..#.##..#..#.##.######.#.###.#..##.....#####.#########..##...#..#.#
#.####...#..#..#.###..##.#.#...#....##.#####.#..#...##..##.#..#..###....#.
##...#....#######.###.###..#.##....####.#.#...#.#.#...####..#.#..#.###.#..
##.#.####..###.###.###...#..#.#..#..#....##..#..###.#...#.#.#..#.##.##.##.
##....#..#..#.#.##.##.#...#...#####....##..#..####.#.#..#...###.###..###..
#.#.#.##......#..#..##...#.....##.##..####..###....#.#..#...####..#.##....
.#.###.#..#.#..#..###.....##.#.#.##....##...##.#.#.##.#.#..##..##..#......
###...##.###..#.##.#.#..#.##..##.#...##..###.#........#.#.#...#.#.#.#....."""


if __name__ == "__main__":
    main()
